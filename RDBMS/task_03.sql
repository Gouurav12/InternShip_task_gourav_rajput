CREATE DATABASE IF NOT EXISTS retail_store;
USE retail_store;

CREATE TABLE Customers (
    customer_id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    email VARCHAR(100),
    phone VARCHAR(20),
    address TEXT,
    join_date DATE
);

CREATE TABLE Products (
    product_id INT PRIMARY KEY AUTO_INCREMENT,
    product_name VARCHAR(100),
    category VARCHAR(50),
    price DECIMAL(10, 2),
    stock_quantity INT
);

CREATE TABLE Orders (
    order_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10, 2),
    order_status VARCHAR(20),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE OrderDetails (
    order_detail_id INT PRIMARY KEY AUTO_INCREMENT,
    order_id INT,
    product_id INT,
    quantity INT,
    unit_price DECIMAL(10, 2),
    FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

CREATE TABLE Payments (
    payment_id INT PRIMARY KEY AUTO_INCREMENT,
    order_id INT,
    payment_date DATE,
    payment_amount DECIMAL(10, 2),
    payment_method VARCHAR(20),
    FOREIGN KEY (order_id) REFERENCES Orders(order_id)
);
INSERT INTO Customers (first_name, last_name, email, phone, address, join_date) VALUES
('Aarav', 'Patel', 'aarav.patel@email.com', '9876543210', '123 MG Road, Mumbai', '2023-01-10'),
('Siya', 'Sharma', 'siya.sharma@email.com', '8765432109', '456 Linking Road, Delhi', '2022-11-25'),
('Veer', 'Singh', 'veer.singh@email.com', '7654321098', '789 Koramangala, Bangalore', '2023-05-02'),
('Isha', 'Khan', 'isha.khan@email.com', '6543210987', '101 Banjara Hills, Hyderabad', '2023-08-18');

INSERT INTO Products (product_name, category, price, stock_quantity) VALUES
('Laptop', 'Electronics', 50000.00, 50),
('Smartphone', 'Electronics', 25000.00, 100),
('T-Shirt', 'Clothing', 1000.00, 200),
('Jeans', 'Clothing', 2000.00, 150),
('Notebook', 'Stationery', 50.00, 500);

INSERT INTO Orders (customer_id, order_date, total_amount, order_status) VALUES
(1, '2024-10-20', 75000.00, 'Shipped'), 
(2, '2024-10-22', 3000.00, 'Pending'),  
(3, '2024-10-25', 50.00, 'Shipped'),   
(4, '2024-10-27', 50000, 'Pending');

INSERT INTO OrderDetails (order_id, product_id, quantity, unit_price) VALUES
(1, 1, 1, 50000.00), 
(1, 2, 1, 25000.00), 
(2, 3, 1, 1000.00),   
(2, 4, 1, 2000.00),
(3, 5, 1, 50.00),    
(4, 1, 1, 50000);

INSERT INTO Payments (order_id, payment_date, payment_amount, payment_method) VALUES
(1, '2024-10-20', 75000.00, 'Credit Card'),
(3, '2024-10-25', 50.00, 'Cash');

-- 1. How many orders has each customer placed?
SELECT c.first_name, c.last_name, COUNT(o.order_id) AS total_orders
FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name;

-- 2. What's the total revenue generated by each product?
SELECT p.product_name, SUM(od.quantity * od.unit_price) AS total_revenue
FROM Products p JOIN OrderDetails od ON p.product_id = od.product_id
GROUP BY p.product_id, p.product_name;

-- 3. What's the most expensive item we've sold (based on unit price in OrderDetails)?
SELECT p.product_name, od.unit_price
FROM Products p JOIN OrderDetails od ON p.product_id = od.product_id
ORDER BY od.unit_price DESC
LIMIT 1;

-- 4. Which customers have placed orders in the last 30 days?
SELECT c.first_name, c.last_name
FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id
WHERE o.order_date >= DATE('now', '-30 days'); -- SQLite

-- 5. How much has each customer spent in total?
SELECT c.first_name, c.last_name, SUM(o.total_amount) AS total_spent
FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name;

-- 6. How many products have we sold in each category?
SELECT p.category, SUM(od.quantity) AS total_products_sold
FROM Products p JOIN OrderDetails od ON p.product_id = od.product_id
GROUP BY p.category;

-- 7. Which orders are still pending shipment?
SELECT o.order_id
FROM Orders o
WHERE o.order_status = 'Pending';

-- 8. What's the average value of an order?
SELECT AVG(o.total_amount) AS average_order_value
FROM Orders o;

-- 9. Who are our top 5 most valuable customers (based on total spending)?
SELECT c.first_name, c.last_name, SUM(o.total_amount) AS total_spent
FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY total_spent DESC
LIMIT 5;

-- 10. Which products haven't been sold yet?
SELECT p.product_name
FROM Products p
WHERE NOT EXISTS (SELECT 1 FROM OrderDetails od WHERE p.product_id = od.product_id);